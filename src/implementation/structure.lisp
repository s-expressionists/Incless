(in-package #:incless-implementation)

(defun print-structure (client object stream)
  (cond ((or (typep object 'condition)
             (packagep object)
             #+sbcl (sb-impl::funcallable-instance-p object))
         (incless:write-unreadable-object client object stream t t nil))
        (t
         (write-string "#S(" stream)
         (if (equal *print-length* 0)
             (write-string "..." stream)
             (loop with class = (class-of object)
                   for name in (incless:class-slot-names client class)
                   for index from 1 by 2
                   initially (let ((*print-escape* t))
                               (incless:write-object client (class-name class) stream))
                   unless (or (null *print-length*)
                              (< index *print-length*))
                     do (write-string " ..." stream)
                        (loop-finish)
                   do (write-char #\Space stream)
                      (let ((*print-escape* t))
                        (incless:write-object client (intern (symbol-name name) :keyword)
                                              stream))
                   unless (or (null *print-length*)
                              (< (1+ index) *print-length*))
                     do (write-string " ..." stream)
                        (loop-finish)
                   do (write-char #\Space stream)
                      (incless:write-object client
                                            (slot-value object name)
                                            stream)))
         (write-string ")" stream))))
